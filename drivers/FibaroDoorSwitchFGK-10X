/*
  Fibaro Motion Sensor FGMS-001
  Based on code from the multiple people from the Hubitat Community and reference drivers from Hubitat
  These include but not limited to 
    Jean-Jacques GUILLEMAUD, Artur Draga, Bryan Turcotte, Robin Winbourne, Eric Maycock
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  in compliance with the License. You may obtain a copy of the License at:
 
  http://www.apache.org/licenses/LICENSE-2.0
 
  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
  for the specific language governing permissions and limitations under the License.
*/

metadata {
  definition (name: "Fibaro Door Switch FGK-10X", namespace: "entire", author: "Entire") {
    capability "ContactSensor"
    capability "Battery"
    capability "Temperature Measurement"
    capability "Sensor"
    capability "Tamper Alert"

    command "clear"
        
    fingerprint deviceId: "0x4000", inClusters: "0x30,0x9C,0x60,0x85,0x72,0x70,0x86,0x80,0x56,0x84,0x7A"
    fingerprint deviceId: "0x4001", inClusters: "0x5E,0x85,0x59,0x22,0x20,0x80,0x70,0x56,0x5A,0x7A,0x72,0x8E,0x71,0x73,0x98,0x2B,0x9C,0x30,0x31,0x86,0x84"
  }
	
  preferences {
    parameterMap().each {
      if(it.type != null && validForFirmware(it))
	    input it.name, it.type, title:it.title, options:it.items, range:(it.min != null && it.max != null) ? "${it.min}..${it.max}" : null, defaultValue:it.default, required: false
    }
  }
}

/////////////////////////////////////////////////////
// Parameters 
private parameterMap() {
[
  [name:"wakeUpInterval", fw:"2.1-2.5", mode:"wakeup", type:"number", title:"Wake Up interval in seconds (default 4000)", default:"4000", min:1, max:65535],
  [name:"p1", index:1, fw:"2.1-2.5", mode:"zwave", size:2, type:"number", default:0, min:0, max:65535, title:"Input IN alarm cancellation delay (0-65535s)"],
  [name:"p2", index:2, fw:"2.1-2.5", mode:"zwave", size:1, type:"enum", default:1, min:0, max:1, title:"Visual LED indicator", items:[0:"Off",1:"On"]],
  [name:"p3", index:3, fw:"2.1-2.5", mode:"zwave", size:1, type:"enum", default:0, min:0, max:3, title:"Type of input switch", items:[0:"Normally Closed",1:"Normally Open",2:"Monostable",3:"Bistable"]],
  [name:"p5", index:5, fw:"2.1-2.5", mode:"zwave", size:1, type:"enum", default:255, min:1, max:255, title:"Type of of control frame", items:[1:"Smoke Alarm",2:"CO Alarm",3:"CO2 Alarm",4:"Fire Alarm",5:"Water Alarm",255:"Basic Set"]],
  [name:"p7", index:7, fw:"2.1-2.5", mode:"zwave", size:2, type:"number", default:255, min:0, max:255, title:"Value of On command sent to 1st association group (0-99, 255)"],
  [name:"p12", index:12, fw:"2.1-2.5", mode:"zwave", size:1, type:"number", default:8, min:0, max:255, title:"Temperature report threshold (0-255 = 0-16DegC)"],

  [name:"wakeUpInterval", fw:"3.2", mode:"wakeup", type:"number", title:"Wake Up interval in seconds (default 21600)", default:"2160", min:3600, max:64800],
  [name:"p1", index:1, fw:"3.2", mode:"zwave", size:1, type:"enum", default:0, min:0, max:1, title:"Operation mode", items:[0:"Door/Window/External Alarm sensor",1:"External button"]],
  [name:"p2", index:2, fw:"3.2", mode:"zwave", size:1, type:"enum", default:0, min:0, max:1, title:"State when closed", items:[0:"Door/Window closed",1:"Door/Window open"]],
  [name:"p3", index:3, fw:"3.2", mode:"zwave", size:1, type:"enum", default:0, min:0, max:4, title:"Visual LED indicator", items:[0:"None",1:"Opening / Closing",2:"Wake up",4:"Tampering"]],
  [name:"p4", index:4, fw:"3.2", mode:"zwave", size:1, type:"enum", default:0, min:0, max:1, title:"Range test after double click", items:[0:"Disabled",1:"Enabled"]],
  [name:"p10", index:10, fw:"3.2", mode:"zwave", size:1, type:"enum", default:0, min:0, max:2, title:"2nd association group triggers", items:[0:"Opening & Closing",1:"Opening",2:"Closing"]],
  [name:"p11", index:11, fw:"3.2", mode:"zwave", size:1, type:"enum", default:0, min:0, max:2, title:"Commands sent to 2nd association group", items:[0:"On",1:"Off",2:"On & Off"]],
  [name:"p12", index:12, fw:"3.2", mode:"zwave", size:2, type:"number", default:255, min:0, max:255, title:"Value of On command sent to 2nd association group (0-99, 255)"],
  [name:"p13", index:13, fw:"3.2", mode:"zwave", size:2, type:"number", default:0, min:0, max:255, title:"Value of Off command sent to 2nd association group (0-99, 255)"],
  [name:"p14", index:14, fw:"3.2", mode:"zwave", size:2, type:"number", default:0, min:0, max:32400, title:"Time delay of On command frame (0-32400 Seconds)"],
  [name:"p15", index:15, fw:"3.2", mode:"zwave", size:2, type:"number", default:0, min:0, max:32400, title:"Time delay of Off command frame (0-32400 Seconds)"],
  [name:"p20", index:20, fw:"3.2", mode:"zwave", size:1, type:"enum", default:0, min:0, max:5, title:"Type of alarm frames (3rd Association group)", items:[
			0:"Door/Windows sensor",1:"Smoke sensor",2:"CO detector",3:"CO2 detector",4:"High temperature sensor",2:"Flood sensor"]],
  [name:"p30", index:30, fw:"3.2", mode:"zwave", size:2, type:"number", default:5, min:0, max:32400, title:"Delay of tamper alarm cancellation (0-32400 Seconds)"],
  [name:"p31", index:31, fw:"3.2", mode:"zwave", size:1, type:"enum", default:0, min:0, max:1, title:"Reporting tamper alarm cancellation", items:[0:"Do not send",1:"Send"]],
  [name:"p50", index:50, fw:"3.2", mode:"zwave", size:2, type:"number", default:300, min:0, max:32400, title:"Temperature measurement interval (5-32400 Seconds 0=Off)"],
  [name:"p51", index:51, fw:"3.2", mode:"zwave", size:2, type:"number", default:10, min:0, max:300, title:"Temperature report threshold (0.1DegC)"],
  [name:"p52", index:52, fw:"3.2", mode:"zwave", size:2, type:"number", default:300, min:0, max:32400, title:"Temperature report interval (5-32400 Seconds 0=Off)"],
  [name:"p53", index:53, fw:"3.2", mode:"zwave", size:2, type:"number", default:0, min:-1000, max:1000, title:"Temperature offset (0.1DegC)"],

  [name:"enableDebugging", mode:"settings", type:"bool", title:"Enable Debug Logging", default:"true"],
  [index:1, mode:"association"],
  [index:2, mode:"association"],
  [index:3, mode:"association"],
  [name:"battery", mode:"battery"]
]
}

//////////////
// Clear event
def clear() {
  logDebug("clear")
  state.clear()
  state.currentProperties = [:]
  device.removeSetting("firmwareVersion")
}

////////////////
// Updated event
def updated() {
  logDebug("updated")
}

//////////////////
// Installed event
def installed() {
  logDebug("Installed")
  state.currentProperties = [:]
}

///////////////////
// basicv1.BasicSet
def zwaveEvent(hubitat.zwave.commands.basicv1.BasicSet cmd) {
  def state = cmd.value ? "open" : "closed"
  if(device.currentValue("contact") != state)
    log.info "Contact ${state}"
  createEvent(name:"contact", value:state, isStateChange:true, displayed:true)
}

/////////////////////////////////////////////////////
// sensormultilevelv5.SensorMultilevelReport
def zwaveEvent(hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelReport cmd, ep = null) {
	logDebug "sensormultilevelv5.SensorMultilevelReport ${ep} ${cmd}"
	
	if (cmd.sensorType == 1) {
		log.info "Temperature ${cmd.scaledSensorValue}°C"
    createEvent(name: "temperature", value: temperature(cmd.scaledSensorValue, "C"), unit:"°${getTemperatureScale()}")
	}
}

////////////////////////////////////
// Standard parse to command classes
def parse(String description) {
  def cmd = zwave.parse(description)
  if (cmd) {
    logDebug("Parsed '${description}'")
    return zwaveEvent(cmd)
  }
  logDebug("Failed to parse '${description}'")
}

/////////////////////
// Standard catch all
def zwaveEvent(hubitat.zwave.Command cmd) {
  logDebug("Unhandled event $cmd")
}

//////////////////////////////////////////
// securityv1.SecurityMessageEncapsulation
def zwaveEvent(hubitat.zwave.commands.securityv1.SecurityMessageEncapsulation cmd) {
  logDebug("securityv1.SecurityMessageEncapsulation '${cmd}'")
	def encapsulatedCommand = cmd.encapsulatedCommand( )
	if (encapsulatedCommand)
		return zwaveEvent(encapsulatedCommand)
	else
		log.warn "Failed to extract secure message from ${cmd}"
}

//////////////////////////
// crc16encapv1.Crc16Encap
def zwaveEvent(hubitat.zwave.commands.crc16encapv1.Crc16Encap cmd) {
	def encapsulatedCommand = zwave.getCommand(cmd.commandClass, cmd.command, cmd.data)
	if (encapsulatedCommand)
		zwaveEvent(encapsulatedCommand)
	else
		log.warn "Unable to extract CRC16 command from ${cmd}"
}

//////////////////////////////////
// create a delay between commands
private commands(commands, delay=500) {
	delayBetween(commands.collect{command(it)}, delay)
}

///////////////////////////////////////////////
// Format the command according to the security
private command(hubitat.zwave.Command cmd) {
	if (getDataValue("zwaveSecurePairingComplete") == "true")
		zwave.securityV1.securityMessageEncapsulation().encapsulate(cmd).format()
	else
		cmd.format()
}

///////////////////////////////////
// format a message for an endpoint
private endpoint(hubitat.zwave.Command cmd, endpoint) {
  zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint:endpoint).encapsulate(cmd)
}

//////////////////////////////////////
// multichannelv3.MultiChannelCmdEncap
def zwaveEvent(hubitat.zwave.commands.multichannelv3.MultiChannelCmdEncap cmd) {
  def encapsulatedCommand = cmd.encapsulatedCommand( )
  if (encapsulatedCommand) {
    logDebug ("Command from endpoint ${cmd.sourceEndPoint}: ${encapsulatedCommand}")
    zwaveEvent(encapsulatedCommand, cmd.sourceEndPoint as Integer)
  }
  else
    log.warn "Could not extract multi channel command from ${cmd}"
}

////////////////////////////////////////
// Update any settings that have changed
def updateSettings()
{
	def cmds = []
	def Updating = "No"

	if(settings.firmwareVersion == null)
    cmds << zwave.versionV1.versionGet()
    
	// Set the individual settings
	parameterMap().each {
		if (validForFirmware(it)) {
      if (it.mode == "zwave") {
        if (state.currentProperties."${it.name}" == null) {
          Updating = "Yes"
          if(settings."${it.name}" != null) {
            log.info("Setting parameter ${it.index} to " + settings."${it.name}")
            cmds << zwave.configurationV1.configurationSet(configurationValue: integer2Array(settings."${it.name}", it.size), parameterNumber: it.index, size: it.size)
          }
          else if(it.default != null) {
            log.info("Setting parameter ${it.index} to ${it.default}")
            cmds << zwave.configurationV1.configurationSet(configurationValue: integer2Array(it.default, it.size), parameterNumber: it.index, size: it.size)
          }
          cmds << zwave.configurationV1.configurationGet(parameterNumber: it.index)
        }
        else if (settings."${it.name}" != null && state.currentProperties."${it.name}" != settings."${it.name}".toInteger()) { 
          Updating = "Yes"
          log.info("Setting parameter ${it.index} to " + settings."${it.name}" + " last value " + state.currentProperties."${it.name}")
          cmds << zwave.configurationV1.configurationSet(configurationValue:  integer2Array(settings."${it.name}", it.size), parameterNumber: it.index, size: it.size)
          cmds << zwave.configurationV1.configurationGet(parameterNumber: it.index)
        } 
      }
      else if(it.mode == "association" && state.currentProperties."a${it.index}" != zwaveHubNodeId) {
			  updating = "Yes"
        log.info("Updating association group ${it.index}")
        cmds << zwave.associationV2.associationSet(groupingIdentifier: it.index, nodeId: [zwaveHubNodeId])
        cmds << zwave.associationV2.associationGet(groupingIdentifier: it.index)
		  }
      else if(it.mode == "removeAssociation") {
        log.info("Removing association group ${it.index}")
        cmds << zwave.associationV2.associationRemove(groupingIdentifier: it.index, nodeId: [])
        cmds << zwave.associationV2.associationGet(groupingIdentifier: it.index)
		  }
      else if(it.mode == "wakeup" && validForFirmware(it) && state.currentProperties.wI != settings.wakeUpInterval) {
        cmds << zwave.wakeUpV2.wakeUpIntervalSet(seconds:settings.wakeUpInterval, nodeid:zwaveHubNodeId)
        cmds << zwave.wakeUpV2.wakeUpIntervalGet( )
        Updating = "Yes"
      }
      else if(it.mode == "battery") {
        cmds << zwave.batteryV1.batteryGet()
      }
    }
  }
  sendEvent(name:"Updating", value: Updating)
	return cmds
}

//////////////////////////////////
// Standard Version1 VersionReport
def zwaveEvent(hubitat.zwave.commands.versionv1.VersionReport cmd) {	
  logDebug("versionv1.VersionReport '${cmd}'")
  state.firmwareVersion = "${cmd.applicationVersion}.${cmd.applicationSubVersion}"
  state.zWaveProtocolVersion = "${cmd.zWaveProtocolVersion}.${cmd.zWaveProtocolSubVersion}"
  log.info "Firmware Version ${state.firmwareVersion}"
  device.updateSetting("firmwareVersion", "${cmd.applicationVersion}.${cmd.applicationSubVersion}")
}

/////////////////////////
// Standard debug logging
private def logDebug(message) {
  if(settings.enableDebugging == true)
	  log.debug "$message"
}

//////////////////////////////
// Scale temperature for units
def temperature(double value, units) {
	if (location.temperatureScale != units) {
    if (location.temperatureScale == "F")
      value = value * 1.8 + 32
    else
      value = (value - 32) / 1.8
  }
  return value.round(1)
}

////////////////////////////
// Standard config v2 report
def zwaveEvent(hubitat.zwave.commands.configurationv2.ConfigurationReport cmd) {
	logDebug("configurationv2.ConfigurationReport $cmd")
	updateProperty(cmd)
}

///////////////////////////////////
// store a parameter update command
def updateProperty(cmd)
{
  value = array2Integer(cmd.configurationValue)
  param = parameterMap().find{it.index == cmd.parameterNumber}
  if(param && param.manual != true) {
    state.currentProperties."p${cmd.parameterNumber}" = value
    if(param.overwrite == true) {
      if(param.type == "enum") {
        device.updateSetting("${param.name}", "${value}")
        log.info "overwritten parameter ${cmd.parameterNumber} with '${value}'"
      }
      else {
  	    device.updateSetting("${param.name}", value)
        log.info "overwritten parameter ${cmd.parameterNumber} with ${value}"
      }
    }
    else {
      settings = SettingsPending(state.currentProperties)
      if(settings == 0) {
        log.info("parameter ${cmd.parameterNumber} reported value ${array2Integer(cmd.configurationValue)}. All parameters updated")
        sendEvent(name:"Updating", value:"No")
      }
      else
        log.info("parameter ${cmd.parameterNumber} reported value ${array2Integer(cmd.configurationValue)}. ${settings} setting(s) left")
    }
  }
  else
    log.info "parameter ${cmd.parameterNumber} reported a value of ${value}"
}

//////////////////////////////////
// associationv2.AssociationReport
def zwaveEvent(hubitat.zwave.commands.associationv2.AssociationReport cmd) {
	logDebug("Association for Group ${cmd.groupingIdentifier} = ${cmd.nodeId[0]}")
	
	state.currentProperties."a${cmd.groupingIdentifier}" = cmd.nodeId[0]
	settings = SettingsPending(state.currentProperties)
	if(settings == 0) {
		log.info "Association Group ${cmd.groupingIdentifier} reported node ${cmd.nodeId[0]}. All parameters updated"
	  sendEvent(name:"Updating", value:"No", displayed:false, isStateChange: true)
	}
	else
		log.info "Association Group ${cmd.groupingIdentifier} reported node ${cmd.nodeId[0]}. ${settings} setting(s) left"
}

///////////////////////////////////////
// Standard wakeupv1 WakeUpNotification
def zwaveEvent(hubitat.zwave.commands.wakeupv1.WakeUpNotification cmd) {
  log.info "Device woke up"
	
  def cmds = updateSettings()
  cmds << zwave.wakeUpV1.wakeUpNoMoreInformation()
  return response(commands(cmds))
}

///////////////////////////////////////
// Standard wakeupv2 WakeUpNotification
def zwaveEvent(hubitat.zwave.commands.wakeupv2.WakeUpNotification cmd) {
  log.info "Device woke up"
	
  def cmds = updateSettings()
  cmds << zwave.wakeUpV2.wakeUpNoMoreInformation()
  return response(commands(cmds))
}

//////////////////////////
// Standard battery report
def zwaveEvent(hubitat.zwave.commands.batteryv1.BatteryReport cmd) {
  log.info "Battery ${cmd.batteryLevel}%"
  createEvent(name:"battery", value:cmd.batteryLevel, unit:"%")
}

////////////////////////////////
// wakeUpV2.WakeUpIntervalReport
def zwaveEvent(hubitat.zwave.commands.wakeupv2.WakeUpIntervalReport cmd) {
	logDebug "Wake up interval = ${cmd}"
  
	state.currentProperties.wI = cmd.seconds
	settings = SettingsPending(state.currentProperties)
	if(settings == 0) {
		log.info "Wake up interval reported ${cmd.seconds}s. All parameters updated"
	  sendEvent(name:"Updating", value:"No", displayed:false, isStateChange: true)
	}
	else
		log.info "Wake up interval reported ${cmd.seconds}s. ${settings} setting(s) left"
}

//////////////////////////
// Check if all up to date
def SettingsPending(currentProperties)
{
  def Pending = 0
	
	parameterMap().each {
    if(validForFirmware(it)) {
      if (it.mode == "zwave"){
			  if (currentProperties."${it.name}" == null)
			    Pending = Pending + 1
			  else if (it.type == null && currentProperties."${it.name}" != it.default)
			    Pending = Pending + 1
			  else if (it.type != null && settings."${it.name}" != null && currentProperties."${it.name}" != settings."${it.name}".toInteger())
          Pending = Pending + 1
		  }
      else if(it.mode == "association" && currentProperties."a${it.index}" != zwaveHubNodeId)
        Pending = Pending + 1
      else if(it.mode == "wakeup" && state.currentProperties.wI != settings.wakeUpInterval) 
        Pending = Pending + 1
    }
	}
	return Pending
}

///////////////////
// Array to integer
def array2Integer(array) { 
  switch(array.size()) {
  case 1:
    (byte)array[0]
    break
  case 2:
    (short)(((array[0] & 0xFF) << 8) | (array[1] & 0xFF))
    break
  case 4:
    (int)(((array[0] & 0xFF) << 24) | ((array[1] & 0xFF) << 16) | ((array[2] & 0xFF) << 8) | (array[3] & 0xFF))
    break
  }
}

///////////////////
// Integer to Array
def integer2Array(value, size) {
	
	if(value instanceof String)
    value = value.toInteger()

	switch(size) {
	case 1:
		[value & 0xFF]
    break
	case 2:
		[(value >> 8) & 0xFF, value & 0xFF]
		break
	case 4:
		[(value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF]
		break
	}
}

///////////////////////////////////////////////
// Check if parameter is valid for the firmware
def validForFirmware(item) {
  def ret = false
  if (item.fw == null)
    ret = true
  else if (settings != null && settings.firmwareVersion != null) {
    ver = settings.firmwareVersion.tokenize(".")*.toInteger()
    list = item.fw.split(",")
    list.each {
      range = it.split("-")
      if(range.length == 1) {
        checkVer = range[0].tokenize(".")*.toInteger()
        if (ver[0] == checkVer[0] && ver[1] == checkVer[1])
          ret = true
      }
      else if (range.length == 2) {
        checkVerMin = range[0].tokenize(".")*.toInteger()
        checkVerMax = range[1].tokenize(".")*.toInteger()
        if ((ver[0] > checkVerMin[0] || (ver[0] == checkVerMin[0] && ver[1] >= checkVerMin[1])) && (ver[0] < checkVerMax[0] || (ver[0] == checkVerMax[0] && ver[1] <= checkVerMax[1])))
          ret = true
      }
    }
  }
  return(ret)
}
